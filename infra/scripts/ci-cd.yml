name: Aviator CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  REGISTRY: ghcr.io
  IMAGE_BASE_NAME: ${{ github.repository }}

jobs:
  lint-and-test:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'
        cache: 'npm'
    
    - name: Install dependencies
      run: |
        npm ci
        npm run lint
        npm test

  build-and-push:
    needs: lint-and-test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service: [frontend, backend, admin]

    steps:
    - uses: actions/checkout@v3
    
    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and Push Docker Image
      uses: docker/build-push-action@v3
      with:
        context: ./${{ matrix.service }}
        push: true
        tags: |
          ${{ env.REGISTRY }}/${{ env.IMAGE_BASE_NAME }}/${{ matrix.service }}:${{ github.sha }}
          ${{ env.REGISTRY }}/${{ env.IMAGE_BASE_NAME }}/${{ matrix.service }}:latest

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Deploy to Kubernetes
      uses: steebchen/kubectl@v2.0.0
      with:
        config: ${{ secrets.KUBE_CONFIG }}
        command: |
          kubectl apply -f infra/kubernetes/
          kubectl set image deployments/frontend frontend=${{ env.REGISTRY }}/${{ env.IMAGE_BASE_NAME }}/frontend:${{ github.sha }}
          kubectl set image deployments/backend backend=${{ env.REGISTRY }}/${{ env.IMAGE_BASE_NAME }}/backend:${{ github.sha }}
          kubectl set image deployments/admin admin=${{ env.REGISTRY }}/${{ env.IMAGE_BASE_NAME }}/admin:${{ github.sha }}

  notify:
    needs: [lint-and-test, build-and-push, deploy]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Send Slack Notification
      uses: 8398a7/action-slack@v3
      with:
        status: ${{ job.status }}
        text: Deployment ${{ job.status == 'success' ? 'succeeded' : 'failed' }}
        webhook_url: ${{ secrets.SLACK_WEBHOOK }}
      if: always()
